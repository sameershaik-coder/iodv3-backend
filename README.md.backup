# IOD V3 Backend - Production-Ready Kubernetes Platform

[![Phase 3 Complete](https://img.shields.io/badge/Phase%203-Complete-brightgreen.svg)](./PHASE3_COMPLETION_REPORT.md)
[![Kubernetes](https://img.shields.io/badge/Kubernetes-Ready-blue.svg)](./k8s/)
[![FastAPI](https://img.shields.io/badge/FastAPI-Microservices-green.svg)](./services/)

A production-ready microservices platform built with FastAPI and deployed on Kubernetes, featuring advanced health monitoring, resource management, and comprehensive automation.

## ðŸš€ Quick Start

```bash
# Clone the repository
git clone https://github.com/sameershaik-coder/iodv3-backend.git
cd iodv3-backend

# Deploy latest version (Phase 3 - Production Ready)
make deploy-phase3

# Test all services
curl http://localhost:30000/health  # API Gateway
curl http://localhost:30001/health  # Accounts Service
curl http://localhost:30002/health  # Blog Service

# Monitor system
make monitor-resources
```

## Architecture

- **API Gateway**: Single entry point routing requests to microservices
- **Accounts Service**: User management with JWT authentication
- **Blog Service**: Blog CRUD operations (admin only)
- **PostgreSQL**: Database for each service
- **Redis**: Caching and session management

## Services

### 1. API Gateway
- Single port entry point (8000)
- Routes requests to appropriate microservices
- Handles authentication middleware

### 2. Accounts Service
- User CRUD operations
- JWT authentication
- Password encryption
- User signup, edit, delete

### 3. Blog Service
- Blog CRUD operations
- Admin-only access
- Content management

## Development Setup

### Prerequisites
- Docker
- Kind (Kubernetes in Docker)
- kubectl
- Python 3.11+
- Poetry

### Quick Start

1. Install dependencies:
```bash
poetry install
```

2. Start development environment:
```bash
docker-compose up -d
```

3. Run services locally:
```bash
# Terminal 1 - API Gateway
cd gateway && poetry run uvicorn main:app --host 0.0.0.0 --port 8000 --reload

# Terminal 2 - Accounts Service
cd services/accounts && poetry run uvicorn main:app --host 0.0.0.0 --port 8001 --reload

# Terminal 3 - Blog Service
cd services/blog && poetry run uvicorn main:app --host 0.0.0.0 --port 8002 --reload
```

### Kubernetes Deployment

#### Phase 1 Enhanced Deployment (Recommended)

The enhanced deployment provides:
- **Local Docker Registry**: Persistent image storage at `localhost:5001`
- **Multi-node Cluster**: 3-node Kind cluster for realistic testing
- **Comprehensive Automation**: Error handling, validation, and status checks
- **Enhanced Testing**: Health checks, API validation, performance metrics
- **Improved Tooling**: Detailed logging and troubleshooting support

```bash
# Complete enhanced deployment
make kind-enhanced

# Individual components
make setup-registry           # Setup local registry
make deploy-enhanced         # Enhanced deployment
make test-comprehensive      # Full test suite
make test-quick             # Quick connectivity tests
make kind-status-enhanced   # Detailed status
make kind-cleanup-enhanced  # Complete cleanup
```

#### Basic Deployment (Original)

1. Create Kind cluster:
```bash
kind create cluster --config k8s/kind-config.yaml
```

2. Deploy to development:
```bash
kubectl apply -f k8s/dev/
```

3. Deploy to QA:
```bash
kubectl apply -f k8s/qa/
```

## Phase 1 Enhancements

### New Features Added
- **Local Docker Registry**: Automatic setup at `localhost:5001`
- **Enhanced Scripts**: Comprehensive automation with error handling
- **Advanced Testing**: Multi-level test suite with performance metrics
- **Improved Makefile**: 15+ new commands for better workflow
- **Better Logging**: Colored output and detailed status information

### Enhanced Scripts
- `scripts/setup-registry.sh` - Local Docker registry management
- `scripts/deploy-kind-enhanced.sh` - Comprehensive deployment automation
- `scripts/test-comprehensive.sh` - Multi-level testing suite

### Usage Examples
```bash
# Registry management
make setup-registry      # Create local registry
make registry-status     # Check registry status
make registry-cleanup    # Remove registry

# Enhanced deployment
make deploy-enhanced     # Full automated deployment
make deploy-enhanced-build-only  # Build and load images only

# Testing options
make test-comprehensive  # Full test suite
make test-quick         # Quick connectivity tests
make test-auth          # Authentication flow only
make test-db            # Database connectivity only
```

## API Endpoints

### Authentication
- POST `/auth/signup` - User registration
- POST `/auth/login` - User login
- POST `/auth/refresh` - Refresh token

### Users
- GET `/users/me` - Get current user
- PUT `/users/me` - Update current user
- DELETE `/users/me` - Delete current user

### Blogs (Admin only)
- GET `/blogs/` - List all blogs
- POST `/blogs/` - Create blog
- GET `/blogs/{blog_id}` - Get blog by ID
- PUT `/blogs/{blog_id}` - Update blog
- DELETE `/blogs/{blog_id}` - Delete blog

## Environment Variables

See `.env.example` for required environment variables.
